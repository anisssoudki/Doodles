git add -A 
git commit -m 
git status 
git push origin master
-----------------------
notes
assets will load the css and js it will get loaded from layout application link 
channels folder will work with application cable for chat app or messages  
controles folder -> house all controllers 
helpers is for helper function or methods to help with our views
js folder handled by webpack packs folder than js manifest file 
models folder store all models inherite from active record 
views folder includes layout folder and the rest of our views the yield code in application.html.erb will yield all our views

bin folder (binary executable folder )
confi(configuration for application->env defines development production exetera)(credentiels file can be used to accept api )
routes.rb is in config and it defines our routes 
db is to house the database and our migrations and schecmas 
gem file for gems
package.json lists the packages and dependencies using yarn
readme.md (instructions for the application)
.gitignore and .files dont show by default they are hidden files 
------------------------------------------------
version control with Git when we make changes to code we make commit so basically saving with a message with info about the code 
commit copies and save how the code looks so there is a commit history so if there is a mistake we can go back to an earlier version of the code git.scm.com lots of documentation 

-----------------------------------------
Deploying to production on heroku - production hosting service  
https://devcenter.heroku.com/articles/getting-started-with-rails6 (instructions on deployment good for refrence)
we will need heroku cli 

heroku login take us to a website heroku cli might ask for username and password
back to terminal it should say logged in as the user 
make sure we are in the application and the next step is to create a production shell in production env
heroku create will create a shell and give us a link which is the website 
we have to set up database gem for production heroku uses postgress not sqlite3 so we have to change that 
sqlite for development postgress for deployment in gem file group production we have to add the pg gem 

-->group :production do 
gem 'pg'
end

comment out or remove the sqlite gem and add it to development and test 
-->run bundle install --without production 
--> make a commit git add -A git commit -m "make app production ready" git push heroku master 
this will deploy to heroku app 

heroku open to open the app we can change the name of the application 
form app directory 
--> heroku rename (name of app ) ignore parenthentese 
git remote -v to check the new name 

we on heroku and have an application on the live web :) 
-----------------------------------------------------------------------

database's and modules 
crud communicates with sql and databases crud-> create read update delete 
active reacord orm object relational mapper is a middle man that communicates with ruby and the database so we dont hve to type sql queries 
 application record is an additional abstraction from active record and we can use it to inherite from in our created modules in rails v 5 and above
 --------------------------
scaffold generator: will generate table model controller and views (rails magic)
scaffold generator: will basically generate everything for us 
example rails generate scaffold Article title:string description:text 
this will create all this 

invoke  active_record
      create    db/migrate/20200704212452_create_articles.rb      create    app/models/article.rb
      invoke    test_unit
      create      test/models/article_test.rb
      create      test/fixtures/articles.yml
      invoke  resource_route
       route    resources :articles
      invoke  scaffold_controller
      create    app/controllers/articles_controller.rb
      invoke    erb
      create      app/views/articles
      create      app/views/articles/index.html.erb
      create      app/views/articles/edit.html.erb
      create      app/views/articles/show.html.erb
      create      app/views/articles/new.html.erb
      create      app/views/articles/_form.html.erb
      invoke    test_unit
      create      test/controllers/articles_controller_test.rb
      create      test/system/articles_test.rb
      invoke    helper
      create      app/helpers/articles_helper.rb
      invoke      test_unit
      invoke    jbuilder
      create      app/views/articles/index.json.jbuilder
      create      app/views/articles/show.json.jbuilder
      create      app/views/articles/_article.json.jbuilder
      invoke  assets
      invoke    scss
      create      app/assets/stylesheets/articles.scss
      invoke  scss
      create    app/assets/stylesheets/scaffolds.scss

now we can run the migration file rails or rake db:migrate this will create our schema we can adjust the migration file before if we need to 

in db schema this is what will get created 
ActiveRecord::Schema.define(version: 2020_07_04_212452) do

  create_table "articles", force: :cascade do |t|
    t.string "title"
    t.text "description"
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
  end

end

it also creates the articles controller which i will write comments explaining what they do so refer there as well 
-> app/controllers/articles_controller
also an article.rb modul inherits from application record so its already set up to talk to the database
in config routes it generate the resources :articles command which provide all the crud routes 
rails routes --expanded will give us a very nice reading view for the routes
to check it rails routes || grep articles will show us all the articles 

The line resources :articles in the config/routes.rb file provides the following routes:

- index of articles (GET request)

- new article (GET)

- create article (POST)

- edit article (GET)

- update article (PUT and PATCH)

- show article (GET)

- delete article (DELETE)

From UI perspective ->

- index lists all the articles in the articles table in the database of the app

- new article deals with the form to enter in new article details

- create handles the submission of the items in the new article form

- edit article deals with the form to enter edited information for an existing article

- update article deals with the submission of the edit article form

- show article displays an individual article based on selection

- delete article deletes an article from the articles table

-----------------------------------------
now i will manually generate article but instead going to name it something different maybe blog 
instead of using scafflod i will either generate it using controller or resource and manually write everything in 
as practice/ this is only intended for practice its going to end up being a bogus website 

model name: singular (blog)
blog model file name: blog.br snake case singular 
blog model class name: Blog capitalized (class name are capitalized follow camel case convention)
table name: blogs plural as in blogs table 

------------------------------------------------------------------------------
rails generate migration create_blogs
->invoke  active_record
      create    db/migrate/20200704223233_create_blogs.rb
      add attributes than -> rails db:migrate to run the migration 
      we can add new attributes by generating a new migration if we forgot or we need to update a table 

rails generate migration add_description_to_blogs
generates invoke  active_record
      create    db/migrate/20200704224030_add_description_ 
      now we can go on that migration file and add what we need 
      run the migration rails db:migrate than we will get this
       add_column(:blogs, :description, :text)
   -> 0.0028s
== 20200704224030 AddDescriptionToBlogs: migrated (0.0036s
check the schema to make sure its added.
------------------------------------------------------------
we can make a model file called blog.rb in it inherite from the application record (this model gives us getters and setters because of the inheritance from application record)
we can drop to the rails console rails c and test the connection to the database
 Blog.all
   (0.5ms)  SELECT sqlite_version(*)
  Blog Load (0.2ms)  SELECT "blogs".* FROM "blogs" LIMIT ?  
[["LIMIT", 11]]

--> authentication of our blog module right now we can create empty blogs so to prevent this we are going to use validations or constraints using the model file to enforce what can go into the database
# another validation we wanna add is uselessness of blogs so we can enforce minimum length requirment for title and description

https://guides.rubyonrails.org/active_record_validations.html

------------------------------------------------
add the routes in the config we can use resources :blogs
if we restrict some routes we use resources :blogs , only: [:show]